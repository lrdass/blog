---
layout: post
title:  " 'The Matrix is everywhere. It is all around us. Even now in this very room', Morpheus - Como fazer uma maquina entender as tr√™s dimens√µes "
date:   2022-06-16 12:28:05 -0300
categories: rasterizer
---

Chegamos finalmente em como vamos representar uma cena tridimensional. Infelizmente vamos ser obrigados a usar um pouco mais de matem√°tica porque vamos precisar fazer a maquina entender tanto os pontos tridimensionais quanto se quisermos mover, esticar ou girar algum ponto precisamos de alguma forma de dizer para o computador como faze-lo. Talvez este seja o texto mais carregado de matem√°tica mas fiquem tranquilos que eu vou tentar ajudar voc√™ leitor a ir do porto da ignor√¢ncia chegar at√© a baia tridimensional atravessando voc√™ o oceano que te separa. Mas temos que lembrar: "mar tranquilo n√£o faz bom marinheiro!"

No post anterior vimos como desenhar um objeto tridimensional com perspectiva, dada uma representa√ß√£o de uma figura tridimensional. Apresentamos apenas a matem√°tica por tr√°s da ideia. Para irmos al√©m aquele m√©todo apresenta alguns problemas:
* N√£o conseguimos desenhar qualquer objeto tridimensional com o m√©todo, por exemplo, esferas. Pois o algoritmo depende de decompor em linhas
* Toda vez que fossemos criar um objeto em cena, precisar√≠amos dizer qual a ordem dos desenhos de cada aresta. E n√£o s√≥ isso: A c√¢mera precisa ficar estacionada em $$(0,0,0)$$.
* Se fossemos criar outro cubo, repetir√≠amos todo o cubo, porem, movendo cada aresta üò©

Ent√£o pensando nestes problemas vamos criar uma forma melhor de descrever os objetos tridimensionais e como podemos criar abstra√ß√µes para desenha-los na tela.

# Descrevendo a cena tridimensional

Ok, vamos bolar algum jeito de resolver os problemas citados.
Vamos come√ßar em: como podemos desenhar qualquer figura tridimensional usando a nossa t√©cnica de proje√ß√£o.

No exemplo anterior para desenhar um cubo n√≥s desenhamos aresta por aresta. Isso √© um pouco limitante porque ter√≠amos que saber como reduzir todas as figuras em retas.
Para contornar isso, e automatizar nosso algoritmo para desenharmos qualquer coisa com a mesma equa√ß√£o de proje√ß√£o que chegamos anteriormente, podemos pensar em reduzir todas as formas em figuras mais simples!

![Golfinho mesh](/images/rasterizer/descricao-cena/dolphin_triangle_mesh.png)

Ent√£o e se reduzirmos tudo √† tri√¢ngulos? Tri√¢ngulos s√£o simples de representar e desenhar. S√£o os pol√≠gonos mais simples e todos os pontos est√£o sempre no mesmo plano! (Aqui tem um √≥tima descri√ß√£o)[https://www.youtube.com/watch?v=KdyvizaygyY] do porque tri√¢ngulos s√£o excelentes pol√≠gonos para reduzir qualquer figura tridimensional. Infelizmente o video √© em ingl√™s.

Se decompormos nossas figuras em tri√¢ngulos precisamos apenas saber quais sao os pontos e como ligar os pontos. No nosso cubo ter√≠amos na face $$ABCD$$ os tri√¢ngulos: $$ABD$$ e $$BCD$$. Podemos ent√£o fazer a seguinte ideia:

```
triangulo:
  | tupla( vertice1, vertice2, vertice3)

modelo:
  | vertices: lista ( tupla (x, y, z))
  | faces: lista( triangulo  )
```

E ent√£o para desenhar qualquer figura descrita dessa forma ter√≠amos :

```
fun√ß√£o desenha_objeto(objeto)
  para cada face em faces(objeto):
    para cada triangulo em face:
      desenha_triangulo(triangulo)

fun√ß√£o desenha_triangulo(triangulo):
  // linha p1-p2
  desenhe_linha(
    proje√ß√£o->tela(
      mundo->proje√ß√£o(v√©rtice1)
    ),
    proje√ß√£o->tela(
      mundo->proje√ß√£o(v√©rtice2)
    ),
  )

  // linha p2-p3
  desenhe_linha(
    proje√ß√£o->tela(
      mundo->proje√ß√£o(v√©rtice2)
    ),
    proje√ß√£o->tela(
      mundo->proje√ß√£o(v√©rtice3)
    ),
  )

  // linha p3-p1
  desenhe_linha(
    proje√ß√£o->tela(
      mundo->proje√ß√£o(v√©rtice3)
    ),
    proje√ß√£o->tela(
      mundo->proje√ß√£o(v√©rtice1)
    ),
  )
```

![Cena](/images/rasterizer/descricao-cena/d-cena-01.jpg)

O cubo foi definido seus v√©rtices em rela√ß√£o a origem. Vamos chamar esse eixo $$x y z$$ de o espa√ßo do cubo. Nesse espa√ßo tem apenas todos os v√©rtices do cubo.
Agora imagine que temos o eixo $$x y z $$ da nossa cena. E nela imagine que temos um cubo a uma distancia de $$4$$ unidades da nossa c√¢mera, no eixo $$z$$.

![Cena](/images/rasterizer/descricao-cena/d-cena-02.jpg)

Dizemos que este espa√ßo √© o espa√ßo da cena. Mas como vamos levar as coordenadas do nosso cubo para as coordenadas do mundo? ü§î
Se a nossa c√¢mera est√° na origem $$(0,0,0)$$, o nosso cubo est√° em $$(0,0,4)$$. Ent√£o no nosso espa√ßo da cena s√≥ precisamos levar os v√©rtices do nosso cubo para essa posi√ß√£o. Se n√≥s somar-mos todas as coordenadas do nosso cubo $$(-1, 1, -1) + (0, 0, 4) = (-1, 1, 3) ...$$ teremos todos os nossos v√©rtices do cubo movidos para a coordenada do espa√ßo da cena.

Vamos usar essa ideia para iniciar nossa modelagem! Queremos ent√£o separar um modelo de objeto de sua instancia. Vamos chamar de instancia o que estiver na nossa cena. E modelo o objeto com seus pontos em seu espa√ßo de objeto. Podemos chegar na seguinte ideia:

```
modelo:
  | vertices: lista( tupla(x, y, z) )
  | faces: lista ( tupla(A,B,C) )

instancia:
  | modelo: modelo
  | posicao_cena: (x, y, z)

cubo_em_cena -> instancia:
  | modelo: cubo
  | posicao_cena: (0, 0, 4)
```

Ent√£o nessa nossa descri√ß√£o atual o que far√≠amos seria a nossa `instancia`, teria uma `posicao_cena = (0, 0, 4)` que somaria em todos os v√©rtices do `modelo` do cubo a posi√ß√£o em cena.

![Cena](/images/rasterizer/descricao-cena/d-cena-03.jpg)
![Cena](/images/rasterizer/descricao-cena/d-cena-04.jpg)
![Cena](/images/rasterizer/descricao-cena/d-cena-05.jpg)
![Cena](/images/rasterizer/descricao-cena/d-cena-05-1.jpg)
![Cena](/images/rasterizer/descricao-cena/d-cena-05-2.jpg)
![Cena](/images/rasterizer/descricao-cena/d-cena-05-3.jpg)
![Cena](/images/rasterizer/descricao-cena/d-cena-06.jpg)
![Cena](/images/rasterizer/descricao-cena/d-cena-07.jpg)
![Cena](/images/rasterizer/descricao-cena/d-cena-08.jpg)
![Cena](/images/rasterizer/descricao-cena/d-cena-09.jpg)
![Cena](/images/rasterizer/descricao-cena/d-cena-10.jpg)
![Cena](/images/rasterizer/descricao-cena/d-cena-11.jpg)
![Cena](/images/rasterizer/descricao-cena/d-cena-12.jpg)

<!-- $$

\begin{equation*}
A_{m,n} =
\begin{pmatrix}
a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\
a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\
\vdots  & \vdots  & \ddots & \vdots  \\
a_{m,1} & a_{m,2} & \cdots & a_{m,n}
\end{pmatrix}
\end{equation*}

$$ -->
